var search_data = {"index":{"searchIndex":["array","date","feedforwardtemperaturecontroller","graphviewer","csvfile","graph","guide","graphviewerserver","io","integer","modbus","client","common","debug","errors","acknowledge","illegaldataaddress","illegaldatavalue","illegalfunction","memoryparityerror","modbusexception","modbustimeout","proxyexception","responsemismatch","slavedevicebus","slavedevicefailure","options","rtu","rtuclient","rtuserver","rtuslave","rtuviatcpclient","rtuviatcpserver","rtuviatcpslave","readonlyproxy","readwriteproxy","sp","server","slave","tcp","tcpclient","tcpserver","tcpslave","numeric","object","pid","raiseresponsematcher","raiseresponsemismatch","smdoven","solo","temperaturecontroller","temperaturecontrollerclient","serialport","string","testclass","testio","thermistor","thread","time","timedrepeat","missedrepeat","stoprepeat","updating","done","report","webserver","gc29tester","[]()","[]=()","addrefresh()","authorized?()","baud()","baud=()","break()","ctok()","calibrator()","catchup()","close()","closed?()","coils()","connect()","convertparamstoconfig()","creategraphs()","csvdata()","csvdirsbelow()","csvfilesbelow()","csv_to_object()","cts()","data_bits()","data_bits=()","dcd()","definemethod()","discrete_inputs()","doprofile()","dsr()","dtr()","dtr=()","dumppdus()","dumpregisters()","dumpvars()","dutnamed()","each()","each_chunk()","each_csv_record()","endupdatethread()","evalconfigparam()","extensions()","failure_message()","flow_control()","flow_control=()","forgetrunnamed()","from_32f()","from_32i()","from_csv()","getdata()","getfile()","getfilename()","getnewdata()","getnewdata()","getsummary()","get_modem_params()","get_signals()","get_slave()","get_slave()","get_slave()","get_slave()","get_slave()","getbyte()","getword()","gobelowtemperature()","gototemperature()","hasnewdata()","holding_registers()","initialize_updating()","input_registers()","inspect()","inspect()","inspect()","join()","ktoc()","lastfulllinetime()","latestrunnamedlike()","leadedprofile()","logtemperature()","logtemperatureheaders()","logview()","logout()","lp()","make_resp()","mask_write_register()","matches?()","mock_query()","mock_query!()","modem_params()","modem_params=()","mtimestring()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notwrittenyet()","old_initialize()","old_rst()","old_to_datetime()","open()","open_connection()","open_connection()","open_connection()","open_connection()","open_serial_port()","open_tcp_connection()","pack_to_word()","parity()","parity=()","pos=()","positionat()","printstatusreport()","processconfigparams()","processvalue()","profile()","protected!()","query()","raise_response_mismatch()","ramp()","rampsoaktimes()","read()","readfile()","read_all_available_bytes()","read_coil()","read_coils()","read_csv()","read_data_available?()","read_discrete_input()","read_discrete_inputs()","read_holding_register()","read_holding_registers()","read_holding_registers()","read_input_register()","read_input_registers()","read_pdu()","read_single_register()","read_timeout()","read_timeout=()","refreshrunnamed()","repeatat()","reset()","reset()","reset()","reset()","resistancefromtemperature()","ri()","round()","rts()","rts=()","runmode=()","runnamed()","runnames()","runs()","selectfields()","selectedgraphs()","selectedheaders()","send_pdu()","serve()","serve()","setilimits()","setpatterntoprofile()","setupprofile()","set_modem_params()","setpointvalue()","signals()","start()","start()","startprofile()","startupdatethread()","stop()","stop()","stop()","stop_bits()","stop_bits=()","t()","ti=()","temperaturefromresistance()","temperaturelog=()","test_read_method()","timesincelast()","timesincereset()","timetillnext()","timestamp()","torun()","to_32f()","to_32i()","to_datetime()","to_degc()","to_degf()","to_deltac()","to_deltaf()","to_gm_time()","to_hash()","to_local_time()","to_s()","to_word()","unpack_bits()","update()","update()","usedata()","validfilenamefrom()","verify_message()","waitforprofile()","wait_for_characters()","with_slave()","write_coil()","write_coils()","write_holding_register()","write_holding_registers()","write_multiple_coils()","write_multiple_registers()","write_single_coil()","write_single_register()","write_single_register()","write_timeout()","write_timeout=()","makefile","readme","temperature_log_111029_115745","temperature_log_111029_120448","temperature_log_111029_120558","temperature_log_111029_120620","temperature_log_111029_120709","temperature_log_111029_120937"],"longSearchIndex":["array","date","feedforwardtemperaturecontroller","graphviewer","graphviewer::csvfile","graphviewer::graph","graphviewer::guide","graphviewerserver","io","integer","modbus","modbus::client","modbus::common","modbus::debug","modbus::errors","modbus::errors::acknowledge","modbus::errors::illegaldataaddress","modbus::errors::illegaldatavalue","modbus::errors::illegalfunction","modbus::errors::memoryparityerror","modbus::errors::modbusexception","modbus::errors::modbustimeout","modbus::errors::proxyexception","modbus::errors::responsemismatch","modbus::errors::slavedevicebus","modbus::errors::slavedevicefailure","modbus::options","modbus::rtu","modbus::rtuclient","modbus::rtuserver","modbus::rtuslave","modbus::rtuviatcpclient","modbus::rtuviatcpserver","modbus::rtuviatcpslave","modbus::readonlyproxy","modbus::readwriteproxy","modbus::sp","modbus::server","modbus::slave","modbus::tcp","modbus::tcpclient","modbus::tcpserver","modbus::tcpslave","numeric","object","pid","raiseresponsematcher","raiseresponsemismatch","smdoven","solo","solo::temperaturecontroller","solo::temperaturecontrollerclient","serialport","string","testclass","testio","thermistor","thread","time","timedrepeat","timedrepeat::missedrepeat","timedrepeat::stoprepeat","updating","updating::done","updating::report","webserver","webserver::gc29tester","modbus::readonlyproxy#[]()","modbus::readwriteproxy#[]=()","webserver::gc29tester#addrefresh()","webserver::gc29tester#authorized?()","serialport#baud()","serialport#baud=()","serialport#break()","thermistor#ctok()","webserver::gc29tester#calibrator()","timedrepeat#catchup()","modbus::client#close()","modbus::client#closed?()","modbus::slave#coils()","modbus::client::connect()","webserver::gc29tester#convertparamstoconfig()","graphviewer::csvfile#creategraphs()","graphviewer::csvfile#csvdata()","graphviewerserver#csvdirsbelow()","graphviewerserver#csvfilesbelow()","string#csv_to_object()","serialport#cts()","serialport#data_bits()","serialport#data_bits=()","serialport#dcd()","solo::temperaturecontroller::definemethod()","modbus::slave#discrete_inputs()","smdoven#doprofile()","serialport#dsr()","serialport#dtr()","serialport#dtr=()","smdoven#dumppdus()","smdoven#dumpregisters()","webserver::gc29tester#dumpvars()","webserver::gc29tester#dutnamed()","timedrepeat#each()","array#each_chunk()","io#each_csv_record()","updating#endupdatethread()","webserver::gc29tester#evalconfigparam()","object#extensions()","raiseresponsemismatch#failure_message()","serialport#flow_control()","serialport#flow_control=()","graphviewer::csvfile::forgetrunnamed()","array#from_32f()","array#from_32i()","array::from_csv()","graphviewerserver#getdata()","graphviewerserver#getfile()","graphviewerserver#getfilename()","graphviewer::csvfile#getnewdata()","graphviewerserver#getnewdata()","webserver::gc29tester#getsummary()","serialport#get_modem_params()","serialport#get_signals()","modbus::client#get_slave()","modbus::rtuclient#get_slave()","modbus::rtuviatcpclient#get_slave()","modbus::tcpclient#get_slave()","solo::temperaturecontrollerclient#get_slave()","string#getbyte()","string#getword()","smdoven#gobelowtemperature()","smdoven#gototemperature()","graphviewer::csvfile#hasnewdata()","modbus::slave#holding_registers()","updating#initialize_updating()","modbus::slave#input_registers()","pid#inspect()","timedrepeat#inspect()","timedrepeat::missedrepeat#inspect()","modbus::rtuserver#join()","thermistor#ktoc()","graphviewer::csvfile#lastfulllinetime()","graphviewer::csvfile::latestrunnamedlike()","smdoven#leadedprofile()","smdoven#logtemperature()","smdoven#logtemperatureheaders()","webserver::gc29tester#logview()","webserver::gc29tester#logout()","object#lp()","object#make_resp()","modbus::slave#mask_write_register()","raiseresponsemismatch#matches?()","object#mock_query()","object#mock_query!()","serialport#modem_params()","serialport#modem_params=()","graphviewerserver#mtimestring()","feedforwardtemperaturecontroller::new()","graphviewer::csvfile::new()","graphviewer::graph::new()","graphviewer::guide::new()","modbus::client::new()","modbus::errors::responsemismatch::new()","modbus::rtuclient::new()","modbus::rtuserver::new()","modbus::rtuviatcpserver::new()","modbus::readonlyproxy::new()","modbus::slave::new()","modbus::tcpserver::new()","modbus::tcpslave::new()","pid::new()","raiseresponsemismatch::new()","smdoven::new()","serialport::new()","testio::new()","thermistor::new()","timedrepeat::new()","timedrepeat::missedrepeat::new()","updating::report::new()","webserver::gc29tester#notwrittenyet()","modbus::rtuclient#old_initialize()","solo::temperaturecontroller#old_rst()","time#old_to_datetime()","serialport::open()","modbus::client#open_connection()","modbus::rtuclient#open_connection()","modbus::rtuviatcpclient#open_connection()","modbus::tcpclient#open_connection()","modbus::sp#open_serial_port()","modbus::tcp#open_tcp_connection()","array#pack_to_word()","serialport#parity()","serialport#parity=()","graphviewer::csvfile#pos=()","graphviewer::csvfile#positionat()","updating#printstatusreport()","webserver::gc29tester#processconfigparams()","smdoven#processvalue()","solo::temperaturecontroller#profile()","webserver::gc29tester#protected!()","modbus::slave#query()","raiseresponsematcher#raise_response_mismatch()","smdoven#ramp()","solo::temperaturecontroller#rampsoaktimes()","testio#read()","graphviewer::csvfile::readfile()","modbus::rtuclient#read_all_available_bytes()","modbus::slave#read_coil()","modbus::slave#read_coils()","io#read_csv()","modbus::rtuclient#read_data_available?()","modbus::slave#read_discrete_input()","modbus::slave#read_discrete_inputs()","modbus::slave#read_holding_register()","modbus::slave#read_holding_registers()","solo::temperaturecontroller#read_holding_registers()","modbus::slave#read_input_register()","modbus::slave#read_input_registers()","modbus::rtuclient#read_pdu()","solo::temperaturecontroller#read_single_register()","serialport#read_timeout()","serialport#read_timeout=()","graphviewer::csvfile::refreshrunnamed()","timedrepeat::repeatat()","feedforwardtemperaturecontroller#reset()","pid#reset()","smdoven#reset()","timedrepeat#reset()","thermistor#resistancefromtemperature()","serialport#ri()","graphviewer::csvfile#round()","serialport#rts()","serialport#rts=()","solo::temperaturecontroller#runmode=()","graphviewer::csvfile::runnamed()","graphviewer::csvfile::runnames()","graphviewer::csvfile::runs()","graphviewer::csvfile#selectfields()","graphviewer::csvfile#selectedgraphs()","graphviewer::csvfile#selectedheaders()","modbus::rtuclient#send_pdu()","modbus::rtuviatcpserver#serve()","modbus::tcpserver#serve()","pid#setilimits()","smdoven#setpatterntoprofile()","smdoven#setupprofile()","serialport#set_modem_params()","smdoven#setpointvalue()","serialport#signals()","modbus::rtuserver#start()","webserver::start()","smdoven#startprofile()","updating#startupdatethread()","modbus::rtuserver#stop()","timedrepeat::stop()","timedrepeat#stop()","serialport#stop_bits()","serialport#stop_bits=()","object#t()","pid#ti=()","thermistor#temperaturefromresistance()","smdoven#temperaturelog=()","modbus::client#test_read_method()","timedrepeat#timesincelast()","timedrepeat#timesincereset()","timedrepeat#timetillnext()","object#timestamp()","time::torun()","array#to_32f()","array#to_32i()","time#to_datetime()","numeric#to_degc()","numeric#to_degf()","numeric#to_deltac()","numeric#to_deltaf()","date#to_gm_time()","array#to_hash()","date#to_local_time()","thread#to_s()","integer#to_word()","string#unpack_bits()","feedforwardtemperaturecontroller#update()","pid#update()","graphviewer::csvfile#usedata()","graphviewer::csvfile::validfilenamefrom()","raiseresponsemismatch#verify_message()","smdoven#waitforprofile()","modbus::rtuclient#wait_for_characters()","modbus::client#with_slave()","modbus::slave#write_coil()","modbus::slave#write_coils()","modbus::slave#write_holding_register()","modbus::slave#write_holding_registers()","modbus::slave#write_multiple_coils()","modbus::slave#write_multiple_registers()","modbus::slave#write_single_coil()","modbus::slave#write_single_register()","solo::temperaturecontroller#write_single_register()","serialport#write_timeout()","serialport#write_timeout=()","","","","","","","",""],"info":[["Array","","Array.html","",""],["Date","","Date.html","",""],["FeedForwardTemperatureController","","FeedForwardTemperatureController.html","","<p>sampling period = 0.2 sec sampling rate = 5 / sec kP = 50.0 kI =  20.0\n(20.0 * 0.2 = 4.0) kD = 100.0 …\n"],["GraphViewer","","GraphViewer.html","",""],["GraphViewer::CSVFile","","GraphViewer/CSVFile.html","",""],["GraphViewer::Graph","","GraphViewer/Graph.html","",""],["GraphViewer::Guide","","GraphViewer/Guide.html","",""],["GraphViewerServer","","GraphViewerServer.html","",""],["IO","","IO.html","",""],["Integer","","Integer.html","",""],["ModBus","","ModBus.html","","<p>RModBus - free implementation of ModBus protocol on Ruby.\n<p>Copyright (C) 2008-2011  Timin Aleksey\n<p>This program …\n"],["ModBus::Client","","ModBus/Client.html","","<p>@abstract\n<p>Use public wrap method\n"],["ModBus::Common","","ModBus/Common.html","",""],["ModBus::Debug","","ModBus/Debug.html","",""],["ModBus::Errors","","ModBus/Errors.html","",""],["ModBus::Errors::Acknowledge","","ModBus/Errors/Acknowledge.html","",""],["ModBus::Errors::IllegalDataAddress","","ModBus/Errors/IllegalDataAddress.html","",""],["ModBus::Errors::IllegalDataValue","","ModBus/Errors/IllegalDataValue.html","",""],["ModBus::Errors::IllegalFunction","","ModBus/Errors/IllegalFunction.html","",""],["ModBus::Errors::MemoryParityError","","ModBus/Errors/MemoryParityError.html","",""],["ModBus::Errors::ModBusException","","ModBus/Errors/ModBusException.html","",""],["ModBus::Errors::ModBusTimeout","","ModBus/Errors/ModBusTimeout.html","",""],["ModBus::Errors::ProxyException","","ModBus/Errors/ProxyException.html","",""],["ModBus::Errors::ResponseMismatch","","ModBus/Errors/ResponseMismatch.html","",""],["ModBus::Errors::SlaveDeviceBus","","ModBus/Errors/SlaveDeviceBus.html","",""],["ModBus::Errors::SlaveDeviceFailure","","ModBus/Errors/SlaveDeviceFailure.html","",""],["ModBus::Options","","ModBus/Options.html","",""],["ModBus::RTU","","ModBus/RTU.html","",""],["ModBus::RTUClient","","ModBus/RTUClient.html","","<p>RTU client implementation @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RTUClient</span>.<span class=\"ruby-identifier\">connect</span>(<span class=\"ruby-string\">'/dev/ttyS1'</span>, <span class=\"ruby-value\">9600</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">cl</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">cl</span>.<span class=\"ruby-identifier\">with_slave</span>(<span class=\"ruby-identifier\">uid</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ModBus::RTUServer","","ModBus/RTUServer.html","","<p>RTU server implementation @example\n\n<pre>srv = RTUServer.new('/dev/ttyS1', 9600, 1)\nsrv.coils = [1,0,1,1]\nsrv.discrete_inputs ...</pre>\n"],["ModBus::RTUSlave","","ModBus/RTUSlave.html","","<p>RTU slave implementation @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RTUClient</span>.<span class=\"ruby-identifier\">connect</span>(<span class=\"ruby-identifier\">port</span>, <span class=\"ruby-identifier\">baud</span>, <span class=\"ruby-identifier\">opts</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">cl</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">cl</span>.<span class=\"ruby-identifier\">with_slave</span>(<span class=\"ruby-identifier\">uid</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ModBus::RTUViaTCPClient","","ModBus/RTUViaTCPClient.html","","<p>RTU over TCP client implementation @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RTUViaTCPClient</span>.<span class=\"ruby-identifier\">connect</span>(<span class=\"ruby-string\">'127.0.0.1'</span>, <span class=\"ruby-value\">10002</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">cl</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">cl</span>.<span class=\"ruby-identifier\">with_slave</span>(<span class=\"ruby-identifier\">uid</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ModBus::RTUViaTCPServer","","ModBus/RTUViaTCPServer.html","","<p>RTU over TCP server implementation @example\n\n<pre>srv = RTUViaTCPServer.new(10002, 1)\nsrv.coils = [1,0,1,1] ...</pre>\n"],["ModBus::RTUViaTCPSlave","","ModBus/RTUViaTCPSlave.html","","<p>RTU over TCP slave implementation @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RTUViaTCP</span>.<span class=\"ruby-identifier\">connect</span>(<span class=\"ruby-string\">'127.0.0.1'</span>, <span class=\"ruby-value\">10002</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">cl</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">cl</span>.<span class=\"ruby-identifier\">with_slave</span>(<span class=\"ruby-identifier\">uid</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ModBus::ReadOnlyProxy","","ModBus/ReadOnlyProxy.html","","<p>Given a slave and a type of operation, execute a single or multiple read\nusing hash syntax\n"],["ModBus::ReadWriteProxy","","ModBus/ReadWriteProxy.html","",""],["ModBus::SP","","ModBus/SP.html","",""],["ModBus::Server","","ModBus/Server.html","","<p>Module for implementation ModBus server\n"],["ModBus::Slave","","ModBus/Slave.html","",""],["ModBus::TCP","","ModBus/TCP.html","",""],["ModBus::TCPClient","","ModBus/TCPClient.html","","<p>TCP client implementation @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">TCPClient</span>.<span class=\"ruby-identifier\">connect</span>(<span class=\"ruby-string\">'127.0.0.1'</span>, <span class=\"ruby-value\">502</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">cl</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">cl</span>.<span class=\"ruby-identifier\">with_slave</span>(<span class=\"ruby-identifier\">uid</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ModBus::TCPServer","","ModBus/TCPServer.html","","<p>TCP server implementation @example\n\n<pre>srv = TCPServer.new(10002, 1)\nsrv.coils = [1,0,1,1]\nsrv.discrete_inputs ...</pre>\n"],["ModBus::TCPSlave","","ModBus/TCPSlave.html","","<p>TCP slave implementation @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">TCP</span>.<span class=\"ruby-identifier\">connect</span>(<span class=\"ruby-string\">'127.0.0.1'</span>, <span class=\"ruby-value\">10002</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">cl</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">cl</span>.<span class=\"ruby-identifier\">with_slave</span>(<span class=\"ruby-identifier\">uid</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">slave</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["PID","","PID.html","","<p>$Id$ Implementation of PID control algorithm\n<p>standard form: kP * (error + 1/tI * integral(error) + tD …\n"],["RaiseResponseMatcher","","RaiseResponseMatcher.html","",""],["RaiseResponseMismatch","","RaiseResponseMismatch.html","",""],["SMDOven","","SMDOven.html","",""],["SOLO","","SOLO.html","","<p>$Id$ Automation Direct SOLO temperature controller\n"],["SOLO::TemperatureController","","SOLO/TemperatureController.html","",""],["SOLO::TemperatureControllerClient","","SOLO/TemperatureControllerClient.html","",""],["SerialPort","","SerialPort.html","","<p>This class is used for communication over a serial port. In addition to the\nmethods here, you can use …\n"],["String","","String.html","","<p>RModBus - free implementation of ModBus protocol on Ruby.\n<p>Copyright (C) 2009  Timin Aleksey\n<p>This program …\n"],["TestClass","","TestClass.html","",""],["TestIO","","TestIO.html","",""],["Thermistor","","Thermistor.html","",""],["Thread","","Thread.html","",""],["Time","","Time.html","",""],["TimedRepeat","","TimedRepeat.html","","<p>$Id$\n<p>Repeat a block at a fixed rate; report if it’s impossible to do so\n"],["TimedRepeat::MissedRepeat","","TimedRepeat/MissedRepeat.html","",""],["TimedRepeat::StopRepeat","","TimedRepeat/StopRepeat.html","",""],["Updating","","Updating.html","",""],["Updating::Done","","Updating/Done.html","",""],["Updating::Report","","Updating/Report.html","",""],["Webserver","","Webserver.html","",""],["Webserver::GC29Tester","","Webserver/GC29Tester.html","",""],["[]","ModBus::ReadOnlyProxy","ModBus/ReadOnlyProxy.html#method-i-5B-5D","(key)","<p>Read single or multiple values from a modbus slave depending on whether a\nFixnum or a Range was given. …\n"],["[]=","ModBus::ReadWriteProxy","ModBus/ReadWriteProxy.html#method-i-5B-5D-3D","(key, val)","<p>Write single or multiple values to a modbus slave depending on whether a\nFixnum or a Range was given. …\n"],["addRefresh","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-addRefresh","()",""],["authorized?","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-authorized-3F","()",""],["baud","SerialPort","SerialPort.html#method-i-baud","()","<p>Get the current baud rate, see SerialPort#get_modem_params for details.\n"],["baud=","SerialPort","SerialPort.html#method-i-baud-3D","(p1)","<p>Set the baud rate, see SerialPort#set_modem_params for details.\n"],["break","SerialPort","SerialPort.html#method-i-break","(p1)","<p>Send a break for the given time.\n<p><code>time</code> is an integer of tenths-of-a-second for the break.\n<p>Note: Under Posix …\n"],["cToK","Thermistor","Thermistor.html#method-i-cToK","(c)",""],["calibrator","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-calibrator","()",""],["catchUp","TimedRepeat","TimedRepeat.html#method-i-catchUp","()","<p>a possible response to a missed repeat returns the repetitions that were\nskipped to catch up\n"],["close","ModBus::Client","ModBus/Client.html#method-i-close","()","<p>Close connections\n"],["closed?","ModBus::Client","ModBus/Client.html#method-i-closed-3F","()","<p>Check connections @return [Boolean]\n"],["coils","ModBus::Slave","ModBus/Slave.html#method-i-coils","()","<p>Returns a ModBus::ReadWriteProxy hash interface for coils\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">coils</span>[<span class=\"ruby-identifier\">addr</span>] =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">1</span>]\n<span class=\"ruby-identifier\">coils</span>[<span class=\"ruby-identifier\">addr1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-identifier\">addr2</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["connect","ModBus::Client","ModBus/Client.html#method-c-connect","(*args, &block)",""],["convertParamsToConfig","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-convertParamsToConfig","()","<p>Return hash of changed values\n"],["createGraphs","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-createGraphs","()",""],["csvData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-csvData","(_data = data)","<p>Return a string with CSV representation of the given data records\n"],["csvDirsBelow","GraphViewerServer","GraphViewerServer.html#method-i-csvDirsBelow","(dirname)","<p>return array of dirnames sorted by recentness\n"],["csvFilesBelow","GraphViewerServer","GraphViewerServer.html#method-i-csvFilesBelow","(dirname)","<p>return array of [file, mtime]\n"],["csv_to_object","String","String.html#method-i-csv_to_object","()",""],["cts","SerialPort","SerialPort.html#method-i-cts","()","<p>Get the state (0 or 1) of the CTS line\n"],["data_bits","SerialPort","SerialPort.html#method-i-data_bits","()","<p>Get the current data bits, see SerialPort#get_modem_params for details.\n"],["data_bits=","SerialPort","SerialPort.html#method-i-data_bits-3D","(p1)","<p>Set the data bits, see SerialPort#set_modem_params for details.\n"],["dcd","SerialPort","SerialPort.html#method-i-dcd","()","<p>Get the state (0 or 1) of the DCD line\n"],["defineMethod","SOLO::TemperatureController","SOLO/TemperatureController.html#method-c-defineMethod","(str)",""],["discrete_inputs","ModBus::Slave","ModBus/Slave.html#method-i-discrete_inputs","()","<p>Returns a ModBus::ReadOnlyProxy hash interface for discrete inputs\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">discrete_inputs</span>[<span class=\"ruby-identifier\">addr</span>] =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">1</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["doProfile","SMDOven","SMDOven.html#method-i-doProfile","(_profile,_startTemp=processValue)","<p>profile is array of [temperature,time] values\n"],["dsr","SerialPort","SerialPort.html#method-i-dsr","()","<p>Get the state (0 or 1) of the DSR line\n"],["dtr","SerialPort","SerialPort.html#method-i-dtr","()","<p>Get the state (0 or 1) of the DTR line (not available on Windows)\n"],["dtr=","SerialPort","SerialPort.html#method-i-dtr-3D","(p1)","<p>Set the state (0 or 1) of the DTR line\n"],["dumpPDUs","SMDOven","SMDOven.html#method-i-dumpPDUs","(logfile=statusLog)",""],["dumpRegisters","SMDOven","SMDOven.html#method-i-dumpRegisters","(logfile=statusLog)","<p>dump contents of my registers to logfile\n"],["dumpVars","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-dumpVars","(_binding = binding())",""],["dutNamed","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-dutNamed","(dutname)",""],["each","TimedRepeat","TimedRepeat.html#method-i-each","()",""],["each_chunk","Array","Array.html#method-i-each_chunk","()","<p>call the given block with each piece of myself where the number of fields\nmatch.\n"],["each_csv_record","IO","IO.html#method-i-each_csv_record","(sep=',')","<p>enumerate over each csv record leave file positioned at end of last full\nline\n"],["endUpdateThread","Updating","Updating.html#method-i-endUpdateThread","(stuff=nil)","<p>End the update thread, if any. Do so gracefully, letting the thread clean\nup after itself first.\n"],["evalConfigParam","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-evalConfigParam","(classname, stringval)","<p>classname – the name of the original value’s class (a String) stringval –\nthe new value as entered …\n"],["extensions","Object","Object.html#method-i-extensions","()",""],["failure_message","RaiseResponseMismatch","RaiseResponseMismatch.html#method-i-failure_message","()",""],["flow_control","SerialPort","SerialPort.html#method-i-flow_control","()","<p>Get the flow control. The result is either NONE, HARD, SOFT or (HARD |\nSOFT)\n"],["flow_control=","SerialPort","SerialPort.html#method-i-flow_control-3D","(p1)","<p>Set the flow control to either NONE, HARD, SOFT or (HARD | SOFT)\n\n<pre>Note: SerialPort::HARD mode is not supported ...</pre>\n"],["forgetRunNamed","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-forgetRunNamed","(_name)",""],["from_32f","Array","Array.html#method-i-from_32f","()","<p>Given an array of 32bit Floats, we turn it into an array of 16bit Fixnums,\ndoubling the size\n"],["from_32i","Array","Array.html#method-i-from_32i","()","<p>Given an array of 32bit Fixnum, we turn it into an array of 16bit fixnums,\ndoubling the size\n"],["from_csv","Array","Array.html#method-c-from_csv","(str, sep=',')",""],["getData","GraphViewerServer","GraphViewerServer.html#method-i-getData","(filename = getFilename())",""],["getFile","GraphViewerServer","GraphViewerServer.html#method-i-getFile","(filename = getFilename())",""],["getFilename","GraphViewerServer","GraphViewerServer.html#method-i-getFilename","()",""],["getNewData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-getNewData","(since = lastFullLineTime())","<p>If there has been new data, return an Array, else nil\n"],["getNewData","GraphViewerServer","GraphViewerServer.html#method-i-getNewData","(since, filename = getFilename())","<p>prepend new since\n"],["getSummary","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-getSummary","(html=false)",""],["get_modem_params","SerialPort","SerialPort.html#method-i-get_modem_params","()","<p>Get the configure of the serial port.\n<p>Returned is a hash with the following keys:\n<p>\"baud\" &mdash; Integer …\n"],["get_signals","SerialPort","SerialPort.html#method-i-get_signals","()","<p>Return a hash with the state of each line status bit.  Keys are “rts”,\n“dtr”, “cts”, …\n"],["get_slave","ModBus::Client","ModBus/Client.html#method-i-get_slave","(uid,io)",""],["get_slave","ModBus::RTUClient","ModBus/RTUClient.html#method-i-get_slave","(uid, io)",""],["get_slave","ModBus::RTUViaTCPClient","ModBus/RTUViaTCPClient.html#method-i-get_slave","(uid, io)",""],["get_slave","ModBus::TCPClient","ModBus/TCPClient.html#method-i-get_slave","(uid, io)",""],["get_slave","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-get_slave","(uid,io)",""],["getbyte","String","String.html#method-i-getbyte","(index)",""],["getword","String","String.html#method-i-getword","(i)","<p>Get word by index @param [Integer] i index first bytes of word @return\nunpacked word\n"],["goBelowTemperature","SMDOven","SMDOven.html#method-i-goBelowTemperature","(_temp)","<p>wait until the temperature drops below _temp\n"],["goToTemperature","SMDOven","SMDOven.html#method-i-goToTemperature","(_temp, _epsilon=1.0)",""],["hasNewData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-hasNewData","(since = lastFullLineTime())","<p>If there has been new data, return a seek position, else false\n"],["holding_registers","ModBus::Slave","ModBus/Slave.html#method-i-holding_registers","()","<p>Returns a ModBus::ReadWriteProxy hash interface for holding registers\n<p>@example\n\n<pre>holding_registers[addr] ...</pre>\n"],["initialize_updating","Updating","Updating.html#method-i-initialize_updating","()",""],["input_registers","ModBus::Slave","ModBus/Slave.html#method-i-input_registers","()","<p>Returns a read/write ModBus::ReadOnlyProxy hash interface for coils\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">input_registers</span>[<span class=\"ruby-identifier\">addr</span>] =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">1</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inspect","PID","PID.html#method-i-inspect","()",""],["inspect","TimedRepeat","TimedRepeat.html#method-i-inspect","()",""],["inspect","TimedRepeat::MissedRepeat","TimedRepeat/MissedRepeat.html#method-i-inspect","()",""],["join","ModBus::RTUServer","ModBus/RTUServer.html#method-i-join","()","<p>Join server\n"],["kToC","Thermistor","Thermistor.html#method-i-kToC","(k)",""],["lastFullLineTime","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-lastFullLineTime","()",""],["latestRunNamedLike","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-latestRunNamedLike","(_name)",""],["leadedProfile","SMDOven","SMDOven.html#method-i-leadedProfile","()",""],["logTemperature","SMDOven","SMDOven.html#method-i-logTemperature","()",""],["logTemperatureHeaders","SMDOven","SMDOven.html#method-i-logTemperatureHeaders","()",""],["logView","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-logView","(this_page, log_name, view = :debugLog)",""],["logout","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-logout","()",""],["lp","Object","Object.html#method-i-lp","()",""],["make_resp","Object","Object.html#method-i-make_resp","(msg)",""],["mask_write_register","ModBus::Slave","ModBus/Slave.html#method-i-mask_write_register","(addr, and_mask, or_mask)","<p>Mask a holding register\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mask_write_register</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0xAAAA</span>, <span class=\"ruby-value\">0x00FF</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">self</span>\n</pre>\n"],["matches?","RaiseResponseMismatch","RaiseResponseMismatch.html#method-i-matches-3F","(given_block)",""],["mock_query","Object","Object.html#method-i-mock_query","(request, response)",""],["mock_query!","Object","Object.html#method-i-mock_query-21","(request, response)",""],["modem_params","SerialPort","SerialPort.html#method-i-modem_params","()","<p>Get the configure of the serial port.\n<p>Returned is a hash with the following keys:\n<p>\"baud\" &mdash; Integer …\n"],["modem_params=","SerialPort","SerialPort.html#method-i-modem_params-3D","(*args)","<p>Configure the serial port. You can pass a hash or multiple values as\nseparate arguments. Invalid or unsupported …\n"],["mtimeString","GraphViewerServer","GraphViewerServer.html#method-i-mtimeString","(filename = getFilename())",""],["new","FeedForwardTemperatureController","FeedForwardTemperatureController.html#method-c-new","(_pid, _feedForward, _window = nil)",""],["new","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-new","(_name, _headers = [])",""],["new","GraphViewer::Graph","GraphViewer/Graph.html#method-c-new","(_file, _fieldname, _fieldnumber)",""],["new","GraphViewer::Guide","GraphViewer/Guide.html#method-c-new","(_name, _range)",""],["new","ModBus::Client","ModBus/Client.html#method-c-new","(*args, &block)","<p>Initialized client (alias :connect) @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Client</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">any_args</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">client</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">closed?</span> <span class=\"ruby-comment\">#=&gt; false ...</span>\n</pre>\n"],["new","ModBus::Errors::ResponseMismatch","ModBus/Errors/ResponseMismatch.html#method-c-new","(msg, request, response)",""],["new","ModBus::RTUClient","ModBus/RTUClient.html#method-c-new","(_port,_dataRate,_slaveAddress,_opts)",""],["new","ModBus::RTUServer","ModBus/RTUServer.html#method-c-new","(port, baud=9600, uid=1, opts = {})","<p>Init RTU server @param [Integer] uid slave device @see SP#open_serial_port\n"],["new","ModBus::RTUViaTCPServer","ModBus/RTUViaTCPServer.html#method-c-new","(port = 10002, uid = 1, opts = {})","<p>Init server @param [Integer] port listen port @param [Integer] uid slave\ndevice @param [Hash] opts options …\n"],["new","ModBus::ReadOnlyProxy","ModBus/ReadOnlyProxy.html#method-c-new","(slave, type)","<p>Initialize a proxy for a slave and a type of operation\n"],["new","ModBus::Slave","ModBus/Slave.html#method-c-new","(uid, io)",""],["new","ModBus::TCPServer","ModBus/TCPServer.html#method-c-new","(port = 502, uid = 1, opts = {})","<p>Init server @param [Integer] port listen port @param [Integer] uid slave\ndevice @param [Hash] opts options …\n"],["new","ModBus::TCPSlave","ModBus/TCPSlave.html#method-c-new","(uid, io)","<p>@see Slave::initialize\n"],["new","PID","PID.html#method-c-new","(kp = 1.0, ti = 0.0, td = 0.0, ilimpos=nil, ilimneg=nil)",""],["new","RaiseResponseMismatch","RaiseResponseMismatch.html#method-c-new","(message, request, response)",""],["new","SMDOven","SMDOven.html#method-c-new","(_profile, _portname, _dataRate = self.class.defaultDataRate, _slaveAddress = self.class.defaultSlaveAddress, _opts = self.class.defaultSerialOptions)",""],["new","SerialPort","SerialPort.html#method-c-new","(port, *params)","<p>Creates a serial port object.\n<p><code>port</code> may be a port number or the file name of a defice. The\nnumber is portable; ...\n"],["new","TestIO","TestIO.html#method-c-new","(msg)",""],["new","Thermistor","Thermistor.html#method-c-new","(_r0, _t0, _beta)",""],["new","TimedRepeat","TimedRepeat.html#method-c-new","(_period, _allowableLateness = @@allowableLateness, _initialDelay = @@initialDelay)",""],["new","TimedRepeat::MissedRepeat","TimedRepeat/MissedRepeat.html#method-c-new","(_repeater, _rep, _lateBy)",""],["new","Updating::Report","Updating/Report.html#method-c-new","(_log)",""],["notWrittenYet","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-notWrittenYet","()",""],["old_initialize","ModBus::RTUClient","ModBus/RTUClient.html#method-i-old_initialize","(_port,_dataRate,_slaveAddress,_opts)",""],["old_rst","SOLO::TemperatureController","SOLO/TemperatureController.html#method-i-old_rst","(n,a=nil)",""],["old_to_datetime","Time","Time.html#method-i-old_to_datetime","()","<p>Convert a Time object to a DateTime (from Ruby Cookbook):\n"],["open","SerialPort","SerialPort.html#method-c-open","(port, *params)","<p>This behaves like SerialPort#new, except that you can pass a block to which\nthe new serial port object …\n"],["open_connection","ModBus::Client","ModBus/Client.html#method-i-open_connection","(*args)",""],["open_connection","ModBus::RTUClient","ModBus/RTUClient.html#method-i-open_connection","(port, baud=9600, opts = {})","<p>Open serial port\n"],["open_connection","ModBus::RTUViaTCPClient","ModBus/RTUViaTCPClient.html#method-i-open_connection","(ipaddr, port = 10002, opts = {})","<p>Open TCPIP connection\n"],["open_connection","ModBus::TCPClient","ModBus/TCPClient.html#method-i-open_connection","(ipaddr, port = 502, opts = {})","<p>Open TCPIP connection\n"],["open_serial_port","ModBus::SP","ModBus/SP.html#method-i-open_serial_port","(port, baud, opts = {})","<p>Open serial port @param [String] port name serial ports (“/dev/ttyS0”\nPOSIX, “com1” …\n"],["open_tcp_connection","ModBus::TCP","ModBus/TCP.html#method-i-open_tcp_connection","(ipaddr, port, opts = {})","<p>Open TCP socket\n<p>@param [String] ipaddr IP address of remote server @param [Integer] port\nconnection port …\n"],["pack_to_word","Array","Array.html#method-i-pack_to_word","()",""],["parity","SerialPort","SerialPort.html#method-i-parity","()","<p>Get the current parity, see SerialPort#get_modem_params for details.\n"],["parity=","SerialPort","SerialPort.html#method-i-parity-3D","(p1)","<p>Set the parity, see SerialPort#set_modem_params for details.\n"],["pos=","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-pos-3D","(p, m = @mtime)",""],["positionAt","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-positionAt","(time)",""],["printStatusReport","Updating","Updating.html#method-i-printStatusReport","(_log=$stderr)",""],["processConfigParams","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-processConfigParams","()",""],["processValue","SMDOven","SMDOven.html#method-i-processValue","()",""],["profile","SOLO::TemperatureController","SOLO/TemperatureController.html#method-i-profile","(n,a=nil)",""],["protected!","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-protected-21","()",""],["query","ModBus::Slave","ModBus/Slave.html#method-i-query","(request)","<p>Request pdu to slave device\n<p>@param [String] pdu request to slave @return [String] received data\n<p>@raise …\n"],["raise_response_mismatch","RaiseResponseMatcher","RaiseResponseMatcher.html#method-i-raise_response_mismatch","(message, request, response)",""],["ramp","SMDOven","SMDOven.html#method-i-ramp","(_from,_to,_time)",""],["rampSoakTimes","SOLO::TemperatureController","SOLO/TemperatureController.html#method-i-rampSoakTimes","(n,a=nil)",""],["read","TestIO","TestIO.html#method-i-read","(num)",""],["readFile","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-readFile","(_name)",""],["read_all_available_bytes","ModBus::RTUClient","ModBus/RTUClient.html#method-i-read_all_available_bytes","(timeout =0, max = 1000)",""],["read_coil","ModBus::Slave","ModBus/Slave.html#method-i-read_coil","(addr, ncoils)",""],["read_coils","ModBus::Slave","ModBus/Slave.html#method-i-read_coils","(addr, ncoils)","<p>Read coils\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">read_coils</span>(<span class=\"ruby-identifier\">addr</span>, <span class=\"ruby-identifier\">ncoils</span>) =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-operator\">..</span>]\n</pre>\n"],["read_csv","IO","IO.html#method-i-read_csv","(sep=',')","<p>Return an array with the converted contents of the file If an optional\nblock is given, allow pre-processing …\n"],["read_data_available?","ModBus::RTUClient","ModBus/RTUClient.html#method-i-read_data_available-3F","(timeout = 0)","<p>return false if no read data is available for me yet timeout is in seconds\n"],["read_discrete_input","ModBus::Slave","ModBus/Slave.html#method-i-read_discrete_input","(addr, ninputs)",""],["read_discrete_inputs","ModBus::Slave","ModBus/Slave.html#method-i-read_discrete_inputs","(addr, ninputs)","<p>Read discrete inputs\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">read_discrete_inputs</span>(<span class=\"ruby-identifier\">addr</span>, <span class=\"ruby-identifier\">ninputs</span>) =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-operator\">..</span>]\n</pre>\n"],["read_holding_register","ModBus::Slave","ModBus/Slave.html#method-i-read_holding_register","(addr, nregs)",""],["read_holding_registers","ModBus::Slave","ModBus/Slave.html#method-i-read_holding_registers","(addr, nregs)","<p>Read holding registers\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">read_holding_registers</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">5</span>) =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-operator\">..</span>]\n</pre>\n"],["read_holding_registers","SOLO::TemperatureController","SOLO/TemperatureController.html#method-i-read_holding_registers","(addr,n)",""],["read_input_register","ModBus::Slave","ModBus/Slave.html#method-i-read_input_register","(addr, nregs)",""],["read_input_registers","ModBus::Slave","ModBus/Slave.html#method-i-read_input_registers","(addr, nregs)","<p>Read input registers\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">read_input_registers</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">5</span>) =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-operator\">..</span>]\n</pre>\n"],["read_pdu","ModBus::RTUClient","ModBus/RTUClient.html#method-i-read_pdu","()",""],["read_single_register","SOLO::TemperatureController","SOLO/TemperatureController.html#method-i-read_single_register","(addr)","<p>returns nil on error\n"],["read_timeout","SerialPort","SerialPort.html#method-i-read_timeout","()","<p>Get the timeout value (in milliseconds) for reading. See\nSerialPort#set_read_timeout for details.\n"],["read_timeout=","SerialPort","SerialPort.html#method-i-read_timeout-3D","(p1)","<p>Set the timeout value (in milliseconds) for reading. A negative read\ntimeout will return all the available …\n"],["refreshRunNamed","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-refreshRunNamed","(_name)",""],["repeatAt","TimedRepeat","TimedRepeat.html#method-c-repeatAt","(_period, _allowableLateness=@@allowableLateness, _initialDelay=@@initialDelay)","<p>Repeat the given block until an exception or until stop is called The block\nis passed the TimedRepeat …\n"],["reset","FeedForwardTemperatureController","FeedForwardTemperatureController.html#method-i-reset","(actual)",""],["reset","PID","PID.html#method-i-reset","(actual)",""],["reset","SMDOven","SMDOven.html#method-i-reset","()","<p>attempt to re-init the serial port after an error\n"],["reset","TimedRepeat","TimedRepeat.html#method-i-reset","()",""],["resistanceFromTemperature","Thermistor","Thermistor.html#method-i-resistanceFromTemperature","(t)",""],["ri","SerialPort","SerialPort.html#method-i-ri","()","<p>Get the state (0 or 1) of the RI line\n"],["round","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-round","(fields)",""],["rts","SerialPort","SerialPort.html#method-i-rts","()","<p>Get the state (0 or 1) of the RTS line (not available on Windows)\n"],["rts=","SerialPort","SerialPort.html#method-i-rts-3D","(p1)","<p>Set the state (0 or 1) of the RTS line\n"],["runMode=","SOLO::TemperatureController","SOLO/TemperatureController.html#method-i-runMode-3D","(m=nil)",""],["runNamed","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-runNamed","(_name)",""],["runNames","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-runNames","()",""],["runs","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-runs","()",""],["selectFields","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-selectFields","(selection = @headers)",""],["selectedGraphs","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-selectedGraphs","()",""],["selectedHeaders","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-selectedHeaders","()",""],["send_pdu","ModBus::RTUClient","ModBus/RTUClient.html#method-i-send_pdu","(pdu)",""],["serve","ModBus::RTUViaTCPServer","ModBus/RTUViaTCPServer.html#method-i-serve","(io)","<p>Serve requests @param [TCPSocket] io socket\n"],["serve","ModBus::TCPServer","ModBus/TCPServer.html#method-i-serve","(io)","<p>Serve requests @param [TCPSocket] io socket\n"],["setILimits","PID","PID.html#method-i-setILimits","(ilimpos=nil, ilimneg=nil)",""],["setPatternToProfile","SMDOven","SMDOven.html#method-i-setPatternToProfile","(_pattern,_profile,_startTemp=processValue)","<p>profile is array of [temperature,time] values\n"],["setUpProfile","SMDOven","SMDOven.html#method-i-setUpProfile","(n = 0)",""],["set_modem_params","SerialPort","SerialPort.html#method-i-set_modem_params","(*args)","<p>Configure the serial port. You can pass a hash or multiple values as\nseparate arguments. Invalid or unsupported …\n"],["setpointValue","SMDOven","SMDOven.html#method-i-setpointValue","()",""],["signals","SerialPort","SerialPort.html#method-i-signals","()","<p>Return a hash with the state of each line status bit.  Keys are “rts”,\n“dtr”, “cts”, …\n"],["start","ModBus::RTUServer","ModBus/RTUServer.html#method-i-start","()","<p>Start server\n"],["start","Webserver","Webserver.html#method-c-start","()",""],["startProfile","SMDOven","SMDOven.html#method-i-startProfile","(n = 0)",""],["startUpdateThread","Updating","Updating.html#method-i-startUpdateThread","(period, *args)",""],["stop","ModBus::RTUServer","ModBus/RTUServer.html#method-i-stop","()","<p>Stop server\n"],["stop","TimedRepeat","TimedRepeat.html#method-c-stop","()",""],["stop","TimedRepeat","TimedRepeat.html#method-i-stop","()","<p>one way to stop from within a loop Also can use TimedRepeat.stop\n"],["stop_bits","SerialPort","SerialPort.html#method-i-stop_bits","()","<p>Get the current stop bits, see SerialPort#get_modem_params for details.\n"],["stop_bits=","SerialPort","SerialPort.html#method-i-stop_bits-3D","(p1)","<p>Set the stop bits, see SerialPort#set_modem_params for details.\n"],["t","Object","Object.html#method-i-t","(temp=$tempHistory.pop)","<p>go to temp manually\n"],["tI=","PID","PID.html#method-i-tI-3D","(ti)",""],["temperatureFromResistance","Thermistor","Thermistor.html#method-i-temperatureFromResistance","(r)",""],["temperatureLog=","SMDOven","SMDOven.html#method-i-temperatureLog-3D","(file,headers=false)",""],["test_read_method","ModBus::Client","ModBus/Client.html#method-i-test_read_method","(msg)",""],["timeSinceLast","TimedRepeat","TimedRepeat.html#method-i-timeSinceLast","()",""],["timeSinceReset","TimedRepeat","TimedRepeat.html#method-i-timeSinceReset","()",""],["timeTillNext","TimedRepeat","TimedRepeat.html#method-i-timeTillNext","()",""],["timestamp","Object","Object.html#method-i-timestamp","()",""],["toRun","Time","Time.html#method-c-toRun","()","<p>Return the time in seconds required to run the given block\n"],["to_32f","Array","Array.html#method-i-to_32f","()","<p>Given an array of 16bit Fixnum, we turn it into 32bit Int in big-endian\norder, halving the size\n"],["to_32i","Array","Array.html#method-i-to_32i","()","<p>Given an array of 16bit Fixnum, we turn it into 32bit Float in big-endian\norder, halving the size\n"],["to_datetime","Time","Time.html#method-i-to_datetime","()",""],["to_degC","Numeric","Numeric.html#method-i-to_degC","()",""],["to_degF","Numeric","Numeric.html#method-i-to_degF","()",""],["to_deltaC","Numeric","Numeric.html#method-i-to_deltaC","()",""],["to_deltaF","Numeric","Numeric.html#method-i-to_deltaF","()",""],["to_gm_time","Date","Date.html#method-i-to_gm_time","()",""],["to_hash","Array","Array.html#method-i-to_hash","()","<p>takes array of 2-element pairs; returns a hash\n"],["to_local_time","Date","Date.html#method-i-to_local_time","()",""],["to_s","Thread","Thread.html#method-i-to_s","()",""],["to_word","Integer","Integer.html#method-i-to_word","()","<p>Shortcut or turning an integer into a word\n"],["unpack_bits","String","String.html#method-i-unpack_bits","()",""],["update","FeedForwardTemperatureController","FeedForwardTemperatureController.html#method-i-update","(_error, _actual, _samplePeriod)",""],["update","PID","PID.html#method-i-update","(error, actual, sPeriod)","<p>returns sum of PID terms error=commanded-actual sPeriod=time since last\nupdate\n"],["useData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-useData","(data)","<p>assuming headers is set but data is not…\n"],["validFileNameFrom","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-validFileNameFrom","(_name)",""],["verify_message","RaiseResponseMismatch","RaiseResponseMismatch.html#method-i-verify_message","()",""],["waitForProfile","SMDOven","SMDOven.html#method-i-waitForProfile","()",""],["wait_for_characters","ModBus::RTUClient","ModBus/RTUClient.html#method-i-wait_for_characters","(n)",""],["with_slave","ModBus::Client","ModBus/Client.html#method-i-with_slave","(uid, &block)","<p>Given slave object @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">cl</span> = <span class=\"ruby-constant\">Client</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">cl</span>.<span class=\"ruby-identifier\">with_slave</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">slave</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">slave</span>.<span class=\"ruby-identifier\">holding_registers</span>[<span class=\"ruby-value\">0</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["write_coil","ModBus::Slave","ModBus/Slave.html#method-i-write_coil","(addr, val)",""],["write_coils","ModBus::Slave","ModBus/Slave.html#method-i-write_coils","(addr, vals)",""],["write_holding_register","ModBus::Slave","ModBus/Slave.html#method-i-write_holding_register","(addr, val)",""],["write_holding_registers","ModBus::Slave","ModBus/Slave.html#method-i-write_holding_registers","(addr, vals)",""],["write_multiple_coils","ModBus::Slave","ModBus/Slave.html#method-i-write_multiple_coils","(addr, vals)","<p>Write multiple coils\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">write_multiple_coils</span>(<span class=\"ruby-value\">1</span>, [<span class=\"ruby-value\">0</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">0</span>,<span class=\"ruby-value\">1</span>]) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">self</span>\n</pre>\n"],["write_multiple_registers","ModBus::Slave","ModBus/Slave.html#method-i-write_multiple_registers","(addr, vals)","<p>Write multiple holding registers\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">write_multiple_registers</span>(<span class=\"ruby-value\">1</span>, [<span class=\"ruby-value\">0xaa</span>, <span class=\"ruby-value\">0</span>]) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">self</span>\n</pre>\n"],["write_single_coil","ModBus::Slave","ModBus/Slave.html#method-i-write_single_coil","(addr, val)","<p>Write a single coil\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">write_single_coil</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">self</span>\n</pre>\n"],["write_single_register","ModBus::Slave","ModBus/Slave.html#method-i-write_single_register","(addr, val)","<p>Write a single holding register\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">write_single_register</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">0xaa</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">self</span>\n</pre>\n"],["write_single_register","SOLO::TemperatureController","SOLO/TemperatureController.html#method-i-write_single_register","(addr,val)",""],["write_timeout","SerialPort","SerialPort.html#method-i-write_timeout","()","<p>Get the write timeout (in milliseconds)\n<p>Note: Under Posix, write timeouts are not implemented.\n"],["write_timeout=","SerialPort","SerialPort.html#method-i-write_timeout-3D","(p1)","<p>Set a write timeout (in milliseconds)\n<p>Note: Under Posix, write timeouts are not implemented.\n"],["Makefile","","Makefile.html","","<p>BINFILES=$(wildcard bin/*.rb) LIBFILES=$(wildcard lib/*.rb)\nRMODBUS_FILES=$(shell gem contents rmodbus) …\n"],["README","","README.html","","<p>This is a Ruby controller for a Presto Pizzazz countertop pizza oven that\nhas been modified and has its …\n"],["temperature_log_111029_115745","","temperature_log_111029_115745_txt.html","",""],["temperature_log_111029_120448","","temperature_log_111029_120448_txt.html","",""],["temperature_log_111029_120558","","temperature_log_111029_120558_txt.html","",""],["temperature_log_111029_120620","","temperature_log_111029_120620_txt.html","",""],["temperature_log_111029_120709","","temperature_log_111029_120709_txt.html","",""],["temperature_log_111029_120937","","temperature_log_111029_120937_txt.html","",""]]}}