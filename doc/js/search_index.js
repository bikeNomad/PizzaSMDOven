var search_data = {"index":{"searchIndex":["array","date","feedforwardtemperaturecontroller","graphviewer","csvfile","graph","guide","graphviewerserver","io","modbus","common","rtuclient","numeric","object","pid","smdoven","solo","temperaturecontrollerclient","string","testclass","thermistor","thread","time","timedrepeat","missedrepeat","stoprepeat","updating","done","report","webserver","gc29tester","addrefresh()","authorized?()","ctok()","calibrator()","catchup()","convertparamstoconfig()","creategraphs()","csvdata()","csvdirsbelow()","csvfilesbelow()","csv_to_object()","definemethod()","doprofile()","dumppdus()","dumpregisters()","dumpvars()","dutnamed()","each()","each_chunk()","each_csv_record()","endupdatethread()","evalconfigparam()","extensions()","forgetrunnamed()","from_csv()","getdata()","getfile()","getfilename()","getnewdata()","getnewdata()","getsummary()","gobelowtemperature()","gototemperature()","hasnewdata()","initialize_updating()","inspect()","inspect()","inspect()","ktoc()","lastfulllinetime()","latestrunnamedlike()","leadedprofile()","logtemperature()","logtemperatureheaders()","logview()","logout()","lp()","mtimestring()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notwrittenyet()","old_initialize()","old_rst()","old_to_datetime()","pos=()","positionat()","printstatusreport()","processconfigparams()","processvalue()","profile()","protected!()","ramp()","rampsoaktimes()","readfile()","read_all_available_bytes()","read_csv()","read_data_available?()","read_holding_registers()","read_pdu()","read_single_register()","refreshrunnamed()","repeatat()","reset()","reset()","reset()","reset()","resistancefromtemperature()","round()","runmode=()","runnamed()","runnames()","runs()","selectfields()","selectedgraphs()","selectedheaders()","send_pdu()","setilimits()","setpatterntoprofile()","setupprofile()","setpointvalue()","start()","startprofile()","startupdatethread()","stop()","stop()","t()","ti=()","temperaturefromresistance()","temperaturelog=()","timesincelast()","timesincereset()","timetillnext()","timestamp()","torun()","to_datetime()","to_degc()","to_degf()","to_deltac()","to_deltaf()","to_gm_time()","to_hash()","to_local_time()","to_s()","update()","update()","usedata()","validfilenamefrom()","waitforprofile()","wait_for_characters()","write_single_register()","makefile"],"longSearchIndex":["array","date","feedforwardtemperaturecontroller","graphviewer","graphviewer::csvfile","graphviewer::graph","graphviewer::guide","graphviewerserver","io","modbus","modbus::common","modbus::rtuclient","numeric","object","pid","smdoven","solo","solo::temperaturecontrollerclient","string","testclass","thermistor","thread","time","timedrepeat","timedrepeat::missedrepeat","timedrepeat::stoprepeat","updating","updating::done","updating::report","webserver","webserver::gc29tester","webserver::gc29tester#addrefresh()","webserver::gc29tester#authorized?()","thermistor#ctok()","webserver::gc29tester#calibrator()","timedrepeat#catchup()","webserver::gc29tester#convertparamstoconfig()","graphviewer::csvfile#creategraphs()","graphviewer::csvfile#csvdata()","graphviewerserver#csvdirsbelow()","graphviewerserver#csvfilesbelow()","string#csv_to_object()","solo::temperaturecontrollerclient::definemethod()","smdoven#doprofile()","smdoven#dumppdus()","smdoven#dumpregisters()","webserver::gc29tester#dumpvars()","webserver::gc29tester#dutnamed()","timedrepeat#each()","array#each_chunk()","io#each_csv_record()","updating#endupdatethread()","webserver::gc29tester#evalconfigparam()","object#extensions()","graphviewer::csvfile::forgetrunnamed()","array::from_csv()","graphviewerserver#getdata()","graphviewerserver#getfile()","graphviewerserver#getfilename()","graphviewer::csvfile#getnewdata()","graphviewerserver#getnewdata()","webserver::gc29tester#getsummary()","smdoven#gobelowtemperature()","smdoven#gototemperature()","graphviewer::csvfile#hasnewdata()","updating#initialize_updating()","pid#inspect()","timedrepeat#inspect()","timedrepeat::missedrepeat#inspect()","thermistor#ktoc()","graphviewer::csvfile#lastfulllinetime()","graphviewer::csvfile::latestrunnamedlike()","smdoven#leadedprofile()","smdoven#logtemperature()","smdoven#logtemperatureheaders()","webserver::gc29tester#logview()","webserver::gc29tester#logout()","object#lp()","graphviewerserver#mtimestring()","feedforwardtemperaturecontroller::new()","graphviewer::csvfile::new()","graphviewer::graph::new()","graphviewer::guide::new()","modbus::rtuclient::new()","pid::new()","smdoven::new()","solo::temperaturecontrollerclient::new()","thermistor::new()","timedrepeat::new()","timedrepeat::missedrepeat::new()","updating::report::new()","webserver::gc29tester#notwrittenyet()","modbus::rtuclient#old_initialize()","solo::temperaturecontrollerclient#old_rst()","time#old_to_datetime()","graphviewer::csvfile#pos=()","graphviewer::csvfile#positionat()","updating#printstatusreport()","webserver::gc29tester#processconfigparams()","smdoven#processvalue()","solo::temperaturecontrollerclient#profile()","webserver::gc29tester#protected!()","smdoven#ramp()","solo::temperaturecontrollerclient#rampsoaktimes()","graphviewer::csvfile::readfile()","modbus::rtuclient#read_all_available_bytes()","io#read_csv()","modbus::rtuclient#read_data_available?()","solo::temperaturecontrollerclient#read_holding_registers()","modbus::rtuclient#read_pdu()","solo::temperaturecontrollerclient#read_single_register()","graphviewer::csvfile::refreshrunnamed()","timedrepeat::repeatat()","feedforwardtemperaturecontroller#reset()","pid#reset()","smdoven#reset()","timedrepeat#reset()","thermistor#resistancefromtemperature()","graphviewer::csvfile#round()","solo::temperaturecontrollerclient#runmode=()","graphviewer::csvfile::runnamed()","graphviewer::csvfile::runnames()","graphviewer::csvfile::runs()","graphviewer::csvfile#selectfields()","graphviewer::csvfile#selectedgraphs()","graphviewer::csvfile#selectedheaders()","modbus::rtuclient#send_pdu()","pid#setilimits()","smdoven#setpatterntoprofile()","smdoven#setupprofile()","smdoven#setpointvalue()","webserver::start()","smdoven#startprofile()","updating#startupdatethread()","timedrepeat#stop()","timedrepeat::stop()","object#t()","pid#ti=()","thermistor#temperaturefromresistance()","smdoven#temperaturelog=()","timedrepeat#timesincelast()","timedrepeat#timesincereset()","timedrepeat#timetillnext()","object#timestamp()","time::torun()","time#to_datetime()","numeric#to_degc()","numeric#to_degf()","numeric#to_deltac()","numeric#to_deltaf()","date#to_gm_time()","array#to_hash()","date#to_local_time()","thread#to_s()","feedforwardtemperaturecontroller#update()","pid#update()","graphviewer::csvfile#usedata()","graphviewer::csvfile::validfilenamefrom()","smdoven#waitforprofile()","modbus::rtuclient#wait_for_characters()","solo::temperaturecontrollerclient#write_single_register()",""],"info":[["Array","","Array.html","",""],["Date","","Date.html","",""],["FeedForwardTemperatureController","","FeedForwardTemperatureController.html","","<p>sampling period = 0.2 sec sampling rate = 5 / sec kP = 50.0 kI =  20.0\n(20.0 * 0.2 = 4.0) kD = 100.0 …\n"],["GraphViewer","","GraphViewer.html","",""],["GraphViewer::CSVFile","","GraphViewer/CSVFile.html","",""],["GraphViewer::Graph","","GraphViewer/Graph.html","",""],["GraphViewer::Guide","","GraphViewer/Guide.html","",""],["GraphViewerServer","","GraphViewerServer.html","",""],["IO","","IO.html","",""],["ModBus","","ModBus.html","",""],["ModBus::Common","","ModBus/Common.html","",""],["ModBus::RTUClient","","ModBus/RTUClient.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["PID","","PID.html","","<p>$Id$ Implementation of PID control algorithm\n<p>standard form: kP * (error + 1/tI * integral(error) + tD …\n"],["SMDOven","","SMDOven.html","",""],["SOLO","","SOLO.html","","<p>$Id$ Automation Direct SOLO temperature controller\n"],["SOLO::TemperatureControllerClient","","SOLO/TemperatureControllerClient.html","",""],["String","","String.html","",""],["TestClass","","TestClass.html","",""],["Thermistor","","Thermistor.html","",""],["Thread","","Thread.html","",""],["Time","","Time.html","",""],["TimedRepeat","","TimedRepeat.html","","<p>$Id$\n<p>Repeat a block at a fixed rate; report if it’s impossible to do so\n"],["TimedRepeat::MissedRepeat","","TimedRepeat/MissedRepeat.html","",""],["TimedRepeat::StopRepeat","","TimedRepeat/StopRepeat.html","",""],["Updating","","Updating.html","",""],["Updating::Done","","Updating/Done.html","",""],["Updating::Report","","Updating/Report.html","",""],["Webserver","","Webserver.html","",""],["Webserver::GC29Tester","","Webserver/GC29Tester.html","",""],["addRefresh","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-addRefresh","()",""],["authorized?","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-authorized-3F","()",""],["cToK","Thermistor","Thermistor.html#method-i-cToK","(c)",""],["calibrator","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-calibrator","()",""],["catchUp","TimedRepeat","TimedRepeat.html#method-i-catchUp","()","<p>a possible response to a missed repeat returns the repetitions that were\nskipped to catch up\n"],["convertParamsToConfig","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-convertParamsToConfig","()","<p>Return hash of changed values\n"],["createGraphs","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-createGraphs","()",""],["csvData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-csvData","(_data = data)","<p>Return a string with CSV representation of the given data records\n"],["csvDirsBelow","GraphViewerServer","GraphViewerServer.html#method-i-csvDirsBelow","(dirname)","<p>return array of dirnames sorted by recentness\n"],["csvFilesBelow","GraphViewerServer","GraphViewerServer.html#method-i-csvFilesBelow","(dirname)","<p>return array of [file, mtime]\n"],["csv_to_object","String","String.html#method-i-csv_to_object","()",""],["defineMethod","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-c-defineMethod","(str)",""],["doProfile","SMDOven","SMDOven.html#method-i-doProfile","(_profile,_startTemp=processValue)","<p>profile is array of [temperature,time] values\n"],["dumpPDUs","SMDOven","SMDOven.html#method-i-dumpPDUs","(logfile=statusLog)",""],["dumpRegisters","SMDOven","SMDOven.html#method-i-dumpRegisters","(logfile=statusLog)","<p>dump contents of my registers to logfile\n"],["dumpVars","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-dumpVars","(_binding = binding())",""],["dutNamed","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-dutNamed","(dutname)",""],["each","TimedRepeat","TimedRepeat.html#method-i-each","()",""],["each_chunk","Array","Array.html#method-i-each_chunk","()","<p>call the given block with each piece of myself where the number of fields\nmatch.\n"],["each_csv_record","IO","IO.html#method-i-each_csv_record","(sep=',')","<p>enumerate over each csv record leave file positioned at end of last full\nline\n"],["endUpdateThread","Updating","Updating.html#method-i-endUpdateThread","(stuff=nil)","<p>End the update thread, if any. Do so gracefully, letting the thread clean\nup after itself first.\n"],["evalConfigParam","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-evalConfigParam","(classname, stringval)","<p>classname – the name of the original value’s class (a String) stringval –\nthe new value as entered …\n"],["extensions","Object","Object.html#method-i-extensions","()",""],["forgetRunNamed","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-forgetRunNamed","(_name)",""],["from_csv","Array","Array.html#method-c-from_csv","(str, sep=',')",""],["getData","GraphViewerServer","GraphViewerServer.html#method-i-getData","(filename = getFilename())",""],["getFile","GraphViewerServer","GraphViewerServer.html#method-i-getFile","(filename = getFilename())",""],["getFilename","GraphViewerServer","GraphViewerServer.html#method-i-getFilename","()",""],["getNewData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-getNewData","(since = lastFullLineTime())","<p>If there has been new data, return an Array, else nil\n"],["getNewData","GraphViewerServer","GraphViewerServer.html#method-i-getNewData","(since, filename = getFilename())","<p>prepend new since\n"],["getSummary","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-getSummary","(html=false)",""],["goBelowTemperature","SMDOven","SMDOven.html#method-i-goBelowTemperature","(_temp)","<p>wait until the temperature drops below _temp\n"],["goToTemperature","SMDOven","SMDOven.html#method-i-goToTemperature","(_temp, _epsilon=1.0)",""],["hasNewData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-hasNewData","(since = lastFullLineTime())","<p>If there has been new data, return a seek position, else false\n"],["initialize_updating","Updating","Updating.html#method-i-initialize_updating","()",""],["inspect","PID","PID.html#method-i-inspect","()",""],["inspect","TimedRepeat","TimedRepeat.html#method-i-inspect","()",""],["inspect","TimedRepeat::MissedRepeat","TimedRepeat/MissedRepeat.html#method-i-inspect","()",""],["kToC","Thermistor","Thermistor.html#method-i-kToC","(k)",""],["lastFullLineTime","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-lastFullLineTime","()",""],["latestRunNamedLike","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-latestRunNamedLike","(_name)",""],["leadedProfile","SMDOven","SMDOven.html#method-i-leadedProfile","()",""],["logTemperature","SMDOven","SMDOven.html#method-i-logTemperature","()",""],["logTemperatureHeaders","SMDOven","SMDOven.html#method-i-logTemperatureHeaders","()",""],["logView","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-logView","(this_page, log_name, view = :debugLog)",""],["logout","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-logout","()",""],["lp","Object","Object.html#method-i-lp","()",""],["mtimeString","GraphViewerServer","GraphViewerServer.html#method-i-mtimeString","(filename = getFilename())",""],["new","FeedForwardTemperatureController","FeedForwardTemperatureController.html#method-c-new","(_pid, _feedForward, _window = nil)",""],["new","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-new","(_name, _headers = [])",""],["new","GraphViewer::Graph","GraphViewer/Graph.html#method-c-new","(_file, _fieldname, _fieldnumber)",""],["new","GraphViewer::Guide","GraphViewer/Guide.html#method-c-new","(_name, _range)",""],["new","ModBus::RTUClient","ModBus/RTUClient.html#method-c-new","(_port,_dataRate,_slaveAddress,_opts)",""],["new","PID","PID.html#method-c-new","(kp = 1.0, ti = 0.0, td = 0.0, ilimpos=nil, ilimneg=nil)",""],["new","SMDOven","SMDOven.html#method-c-new","(_profile, _portname, _dataRate = self.class.defaultDataRate, _slaveAddress = self.class.defaultSlaveAddress, _opts = self.class.defaultSerialOptions)",""],["new","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-c-new","(_port,_dataRate,_slaveAddress,_opts)",""],["new","Thermistor","Thermistor.html#method-c-new","(_r0, _t0, _beta)",""],["new","TimedRepeat","TimedRepeat.html#method-c-new","(_period, _allowableLateness = @@allowableLateness, _initialDelay = @@initialDelay)",""],["new","TimedRepeat::MissedRepeat","TimedRepeat/MissedRepeat.html#method-c-new","(_repeater, _rep, _lateBy)",""],["new","Updating::Report","Updating/Report.html#method-c-new","(_log)",""],["notWrittenYet","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-notWrittenYet","()",""],["old_initialize","ModBus::RTUClient","ModBus/RTUClient.html#method-i-old_initialize","(_port,_dataRate,_slaveAddress,_opts)",""],["old_rst","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-old_rst","(n,a=nil)",""],["old_to_datetime","Time","Time.html#method-i-old_to_datetime","()","<p>Convert a Time object to a DateTime (from Ruby Cookbook):\n"],["pos=","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-pos-3D","(p, m = @mtime)",""],["positionAt","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-positionAt","(time)",""],["printStatusReport","Updating","Updating.html#method-i-printStatusReport","(_log=$stderr)",""],["processConfigParams","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-processConfigParams","()",""],["processValue","SMDOven","SMDOven.html#method-i-processValue","()",""],["profile","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-profile","(n,a=nil)",""],["protected!","Webserver::GC29Tester","Webserver/GC29Tester.html#method-i-protected-21","()",""],["ramp","SMDOven","SMDOven.html#method-i-ramp","(_from,_to,_time)",""],["rampSoakTimes","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-rampSoakTimes","(n,a=nil)",""],["readFile","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-readFile","(_name)",""],["read_all_available_bytes","ModBus::RTUClient","ModBus/RTUClient.html#method-i-read_all_available_bytes","(timeout =0, max = 1000)",""],["read_csv","IO","IO.html#method-i-read_csv","(sep=',')","<p>Return an array with the converted contents of the file If an optional\nblock is given, allow pre-processing …\n"],["read_data_available?","ModBus::RTUClient","ModBus/RTUClient.html#method-i-read_data_available-3F","(timeout = 0)","<p>return false if no read data is available for me yet timeout is in seconds\n"],["read_holding_registers","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-read_holding_registers","(addr,n)",""],["read_pdu","ModBus::RTUClient","ModBus/RTUClient.html#method-i-read_pdu","()",""],["read_single_register","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-read_single_register","(addr)","<p>returns nil on error\n"],["refreshRunNamed","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-refreshRunNamed","(_name)",""],["repeatAt","TimedRepeat","TimedRepeat.html#method-c-repeatAt","(_period, _allowableLateness=@@allowableLateness, _initialDelay=@@initialDelay)","<p>Repeat the given block until an exception or until stop is called The block\nis passed the TimedRepeat …\n"],["reset","FeedForwardTemperatureController","FeedForwardTemperatureController.html#method-i-reset","(actual)",""],["reset","PID","PID.html#method-i-reset","(actual)",""],["reset","SMDOven","SMDOven.html#method-i-reset","()","<p>attempt to re-init the serial port after an error\n"],["reset","TimedRepeat","TimedRepeat.html#method-i-reset","()",""],["resistanceFromTemperature","Thermistor","Thermistor.html#method-i-resistanceFromTemperature","(t)",""],["round","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-round","(fields)",""],["runMode=","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-runMode-3D","(m=nil)",""],["runNamed","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-runNamed","(_name)",""],["runNames","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-runNames","()",""],["runs","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-runs","()",""],["selectFields","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-selectFields","(selection = @headers)",""],["selectedGraphs","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-selectedGraphs","()",""],["selectedHeaders","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-selectedHeaders","()",""],["send_pdu","ModBus::RTUClient","ModBus/RTUClient.html#method-i-send_pdu","(pdu)",""],["setILimits","PID","PID.html#method-i-setILimits","(ilimpos=nil, ilimneg=nil)",""],["setPatternToProfile","SMDOven","SMDOven.html#method-i-setPatternToProfile","(_pattern,_profile,_startTemp=processValue)","<p>profile is array of [temperature,time] values\n"],["setUpProfile","SMDOven","SMDOven.html#method-i-setUpProfile","(n = 0)",""],["setpointValue","SMDOven","SMDOven.html#method-i-setpointValue","()",""],["start","Webserver","Webserver.html#method-c-start","()",""],["startProfile","SMDOven","SMDOven.html#method-i-startProfile","(n = 0)",""],["startUpdateThread","Updating","Updating.html#method-i-startUpdateThread","(period, *args)",""],["stop","TimedRepeat","TimedRepeat.html#method-i-stop","()","<p>one way to stop from within a loop Also can use TimedRepeat.stop\n"],["stop","TimedRepeat","TimedRepeat.html#method-c-stop","()",""],["t","Object","Object.html#method-i-t","(temp=$tempHistory.pop)","<p>go to temp manually\n"],["tI=","PID","PID.html#method-i-tI-3D","(ti)",""],["temperatureFromResistance","Thermistor","Thermistor.html#method-i-temperatureFromResistance","(r)",""],["temperatureLog=","SMDOven","SMDOven.html#method-i-temperatureLog-3D","(file,headers=false)",""],["timeSinceLast","TimedRepeat","TimedRepeat.html#method-i-timeSinceLast","()",""],["timeSinceReset","TimedRepeat","TimedRepeat.html#method-i-timeSinceReset","()",""],["timeTillNext","TimedRepeat","TimedRepeat.html#method-i-timeTillNext","()",""],["timestamp","Object","Object.html#method-i-timestamp","()",""],["toRun","Time","Time.html#method-c-toRun","()","<p>Return the time in seconds required to run the given block\n"],["to_datetime","Time","Time.html#method-i-to_datetime","()",""],["to_degC","Numeric","Numeric.html#method-i-to_degC","()",""],["to_degF","Numeric","Numeric.html#method-i-to_degF","()",""],["to_deltaC","Numeric","Numeric.html#method-i-to_deltaC","()",""],["to_deltaF","Numeric","Numeric.html#method-i-to_deltaF","()",""],["to_gm_time","Date","Date.html#method-i-to_gm_time","()",""],["to_hash","Array","Array.html#method-i-to_hash","()","<p>takes array of 2-element pairs; returns a hash\n"],["to_local_time","Date","Date.html#method-i-to_local_time","()",""],["to_s","Thread","Thread.html#method-i-to_s","()",""],["update","FeedForwardTemperatureController","FeedForwardTemperatureController.html#method-i-update","(_error, _actual, _samplePeriod)",""],["update","PID","PID.html#method-i-update","(error, actual, sPeriod)","<p>returns sum of PID terms error=commanded-actual sPeriod=time since last\nupdate\n"],["useData","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-i-useData","(data)","<p>assuming headers is set but data is not…\n"],["validFileNameFrom","GraphViewer::CSVFile","GraphViewer/CSVFile.html#method-c-validFileNameFrom","(_name)",""],["waitForProfile","SMDOven","SMDOven.html#method-i-waitForProfile","()",""],["wait_for_characters","ModBus::RTUClient","ModBus/RTUClient.html#method-i-wait_for_characters","(n)",""],["write_single_register","SOLO::TemperatureControllerClient","SOLO/TemperatureControllerClient.html#method-i-write_single_register","(addr,val)",""],["Makefile","","Makefile.html","","<p>BINFILES=$(wildcard bin/*.rb) LIBFILES=$(wildcard lib/*.rb)\nRMODBUS_FILES=$(shell gem contents rmodbus) …\n"]]}}